// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClientService.h"
#include "trademanager.h"


class ClientServiceHandler : virtual public ClientServiceIf {
public:
    ClientServiceHandler(boost::shared_ptr<TradeManager> tm);

	~ClientServiceHandler();

	bool auth(const std::string& client_id, const std::string& password);

	void place_order(const OrderTypeTrans& order);

	double get_pnl(const PositionTypeTrans& ptt);

	void get_calculated_balance(std::map<std::string, double> & _return, const int32_t client_id);

	double get_close_price(const PositionTypeTrans& ptt);

	void get_order(std::vector<OrderTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date);

	void get_transaction(std::vector<TransactionTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date);

	void get_position(std::vector<PositionTypeTrans> & _return, const int32_t client_id);

	void get_balance(ClientBalanceTrans& _return, const int32_t client_id);

	void get_clientinfo(ClientInfoTrans& _return, const int32_t client_id);

	void get_qoute(std::vector<QouteTrans> & _return);

	void get_greeks(GreekRisk& _return);

	void get_client_greeks(GreekRisk& _return, const int32_t client_id);

	void update_hedge_position(const std::vector<PositionTypeTrans> & ptt);


private:
    boost::shared_ptr<TradeManager> tm;

};
