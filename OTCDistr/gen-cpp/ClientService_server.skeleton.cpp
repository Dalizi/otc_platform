// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClientService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ClientServiceHandler : virtual public ClientServiceIf {
 public:
  ClientServiceHandler() {
    // Your initialization goes here
  }

  bool auth(const std::string& client_id, const std::string& password) {
    // Your implementation goes here
    printf("auth\n");
  }

  double get_pnl(const PositionTypeTrans& ptt) {
    // Your implementation goes here
    printf("get_pnl\n");
  }

  double get_close_price(const PositionTypeTrans& ptt) {
    // Your implementation goes here
    printf("get_close_price\n");
  }

  void get_calculated_balance(std::map<std::string, double> & _return, const int32_t client_id) {
    // Your implementation goes here
    printf("get_calculated_balance\n");
  }

  void get_greeks(GreekRisk& _return) {
    // Your implementation goes here
    printf("get_greeks\n");
  }

  void get_client_greeks(GreekRisk& _return, const int32_t client_id) {
    // Your implementation goes here
    printf("get_client_greeks\n");
  }

  void update_hedge_position(const std::vector<PositionTypeTrans> & ptt) {
    // Your implementation goes here
    printf("update_hedge_position\n");
  }

  void place_order(const OrderTypeTrans& order) {
    // Your implementation goes here
    printf("place_order\n");
  }

  void get_order(std::vector<OrderTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) {
    // Your implementation goes here
    printf("get_order\n");
  }

  void get_transaction(std::vector<TransactionTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) {
    // Your implementation goes here
    printf("get_transaction\n");
  }

  void get_position(std::vector<PositionTypeTrans> & _return, const int32_t client_id) {
    // Your implementation goes here
    printf("get_position\n");
  }

  void get_balance(ClientBalanceTrans& _return, const int32_t client_id) {
    // Your implementation goes here
    printf("get_balance\n");
  }

  void get_clientinfo(ClientInfoTrans& _return, const int32_t client_id) {
    // Your implementation goes here
    printf("get_clientinfo\n");
  }

  void get_qoute(std::vector<QouteTrans> & _return) {
    // Your implementation goes here
    printf("get_qoute\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ClientServiceHandler> handler(new ClientServiceHandler());
  shared_ptr<TProcessor> processor(new ClientServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

