/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientService_H
#define ClientService_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "otc_types.h"



class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual bool auth(const std::string& client_id, const std::string& password) = 0;
  virtual double get_pnl(const PositionTypeTrans& ptt) = 0;
  virtual double get_close_price(const PositionTypeTrans& ptt) = 0;
  virtual void get_calculated_balance(std::map<std::string, double> & _return, const int32_t client_id) = 0;
  virtual void get_greeks(GreekRisk& _return) = 0;
  virtual void get_client_greeks(GreekRisk& _return, const int32_t client_id) = 0;
  virtual void update_hedge_position(const std::vector<PositionTypeTrans> & ptt) = 0;
  virtual void place_order(const OrderTypeTrans& order) = 0;
  virtual void get_order(std::vector<OrderTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_transaction(std::vector<TransactionTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_position(std::vector<PositionTypeTrans> & _return, const int32_t client_id) = 0;
  virtual void get_balance(ClientBalanceTrans& _return, const int32_t client_id) = 0;
  virtual void get_clientinfo(ClientInfoTrans& _return, const int32_t client_id) = 0;
  virtual void get_qoute(std::vector<QouteTrans> & _return) = 0;
};

class ClientServiceIfFactory {
 public:
  typedef ClientServiceIf Handler;

  virtual ~ClientServiceIfFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientServiceIf* /* handler */) = 0;
};

class ClientServiceIfSingletonFactory : virtual public ClientServiceIfFactory {
 public:
  ClientServiceIfSingletonFactory(const boost::shared_ptr<ClientServiceIf>& iface) : iface_(iface) {}
  virtual ~ClientServiceIfSingletonFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  bool auth(const std::string& /* client_id */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  double get_pnl(const PositionTypeTrans& /* ptt */) {
    double _return = (double)0;
    return _return;
  }
  double get_close_price(const PositionTypeTrans& /* ptt */) {
    double _return = (double)0;
    return _return;
  }
  void get_calculated_balance(std::map<std::string, double> & /* _return */, const int32_t /* client_id */) {
    return;
  }
  void get_greeks(GreekRisk& /* _return */) {
    return;
  }
  void get_client_greeks(GreekRisk& /* _return */, const int32_t /* client_id */) {
    return;
  }
  void update_hedge_position(const std::vector<PositionTypeTrans> & /* ptt */) {
    return;
  }
  void place_order(const OrderTypeTrans& /* order */) {
    return;
  }
  void get_order(std::vector<OrderTypeTrans> & /* _return */, const int32_t /* client_id */, const std::string& /* start_date */, const std::string& /* end_date */) {
    return;
  }
  void get_transaction(std::vector<TransactionTypeTrans> & /* _return */, const int32_t /* client_id */, const std::string& /* start_date */, const std::string& /* end_date */) {
    return;
  }
  void get_position(std::vector<PositionTypeTrans> & /* _return */, const int32_t /* client_id */) {
    return;
  }
  void get_balance(ClientBalanceTrans& /* _return */, const int32_t /* client_id */) {
    return;
  }
  void get_clientinfo(ClientInfoTrans& /* _return */, const int32_t /* client_id */) {
    return;
  }
  void get_qoute(std::vector<QouteTrans> & /* _return */) {
    return;
  }
};

typedef struct _ClientService_auth_args__isset {
  _ClientService_auth_args__isset() : client_id(false), password(false) {}
  bool client_id :1;
  bool password :1;
} _ClientService_auth_args__isset;

class ClientService_auth_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ClientService_auth_args(const ClientService_auth_args&);
  ClientService_auth_args& operator=(const ClientService_auth_args&);
  ClientService_auth_args() : client_id(), password() {
  }

  virtual ~ClientService_auth_args() throw();
  std::string client_id;
  std::string password;

  _ClientService_auth_args__isset __isset;

  void __set_client_id(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const ClientService_auth_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ClientService_auth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_auth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_auth_args& obj);

};


class ClientService_auth_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ClientService_auth_pargs() throw();
  const std::string* client_id;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_auth_pargs& obj);

};

typedef struct _ClientService_auth_result__isset {
  _ClientService_auth_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_auth_result__isset;

class ClientService_auth_result {
 public:

  static const char* ascii_fingerprint; // = "EF470197A1C5BF49AAC5538556BB87D9";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x47,0x01,0x97,0xA1,0xC5,0xBF,0x49,0xAA,0xC5,0x53,0x85,0x56,0xBB,0x87,0xD9};

  ClientService_auth_result(const ClientService_auth_result&);
  ClientService_auth_result& operator=(const ClientService_auth_result&);
  ClientService_auth_result() : success(0) {
  }

  virtual ~ClientService_auth_result() throw();
  bool success;
  InvalidQuery iq;

  _ClientService_auth_result__isset __isset;

  void __set_success(const bool val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_auth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_auth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_auth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_auth_result& obj);

};

typedef struct _ClientService_auth_presult__isset {
  _ClientService_auth_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_auth_presult__isset;

class ClientService_auth_presult {
 public:

  static const char* ascii_fingerprint; // = "EF470197A1C5BF49AAC5538556BB87D9";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x47,0x01,0x97,0xA1,0xC5,0xBF,0x49,0xAA,0xC5,0x53,0x85,0x56,0xBB,0x87,0xD9};


  virtual ~ClientService_auth_presult() throw();
  bool* success;
  InvalidQuery iq;

  _ClientService_auth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_auth_presult& obj);

};

typedef struct _ClientService_get_pnl_args__isset {
  _ClientService_get_pnl_args__isset() : ptt(false) {}
  bool ptt :1;
} _ClientService_get_pnl_args__isset;

class ClientService_get_pnl_args {
 public:

  static const char* ascii_fingerprint; // = "0E87A62696F21F1757D216119854DA66";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x87,0xA6,0x26,0x96,0xF2,0x1F,0x17,0x57,0xD2,0x16,0x11,0x98,0x54,0xDA,0x66};

  ClientService_get_pnl_args(const ClientService_get_pnl_args&);
  ClientService_get_pnl_args& operator=(const ClientService_get_pnl_args&);
  ClientService_get_pnl_args() {
  }

  virtual ~ClientService_get_pnl_args() throw();
  PositionTypeTrans ptt;

  _ClientService_get_pnl_args__isset __isset;

  void __set_ptt(const PositionTypeTrans& val);

  bool operator == (const ClientService_get_pnl_args & rhs) const
  {
    if (!(ptt == rhs.ptt))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_pnl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_pnl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_pnl_args& obj);

};


class ClientService_get_pnl_pargs {
 public:

  static const char* ascii_fingerprint; // = "0E87A62696F21F1757D216119854DA66";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x87,0xA6,0x26,0x96,0xF2,0x1F,0x17,0x57,0xD2,0x16,0x11,0x98,0x54,0xDA,0x66};


  virtual ~ClientService_get_pnl_pargs() throw();
  const PositionTypeTrans* ptt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_pnl_pargs& obj);

};

typedef struct _ClientService_get_pnl_result__isset {
  _ClientService_get_pnl_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_pnl_result__isset;

class ClientService_get_pnl_result {
 public:

  static const char* ascii_fingerprint; // = "F2C0343F003B98A8EB82C5D8A2ECF2FF";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xC0,0x34,0x3F,0x00,0x3B,0x98,0xA8,0xEB,0x82,0xC5,0xD8,0xA2,0xEC,0xF2,0xFF};

  ClientService_get_pnl_result(const ClientService_get_pnl_result&);
  ClientService_get_pnl_result& operator=(const ClientService_get_pnl_result&);
  ClientService_get_pnl_result() : success(0) {
  }

  virtual ~ClientService_get_pnl_result() throw();
  double success;
  InvalidQuery iq;

  _ClientService_get_pnl_result__isset __isset;

  void __set_success(const double val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_pnl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_pnl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_pnl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_pnl_result& obj);

};

typedef struct _ClientService_get_pnl_presult__isset {
  _ClientService_get_pnl_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_pnl_presult__isset;

class ClientService_get_pnl_presult {
 public:

  static const char* ascii_fingerprint; // = "F2C0343F003B98A8EB82C5D8A2ECF2FF";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xC0,0x34,0x3F,0x00,0x3B,0x98,0xA8,0xEB,0x82,0xC5,0xD8,0xA2,0xEC,0xF2,0xFF};


  virtual ~ClientService_get_pnl_presult() throw();
  double* success;
  InvalidQuery iq;

  _ClientService_get_pnl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_pnl_presult& obj);

};

typedef struct _ClientService_get_close_price_args__isset {
  _ClientService_get_close_price_args__isset() : ptt(false) {}
  bool ptt :1;
} _ClientService_get_close_price_args__isset;

class ClientService_get_close_price_args {
 public:

  static const char* ascii_fingerprint; // = "0E87A62696F21F1757D216119854DA66";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x87,0xA6,0x26,0x96,0xF2,0x1F,0x17,0x57,0xD2,0x16,0x11,0x98,0x54,0xDA,0x66};

  ClientService_get_close_price_args(const ClientService_get_close_price_args&);
  ClientService_get_close_price_args& operator=(const ClientService_get_close_price_args&);
  ClientService_get_close_price_args() {
  }

  virtual ~ClientService_get_close_price_args() throw();
  PositionTypeTrans ptt;

  _ClientService_get_close_price_args__isset __isset;

  void __set_ptt(const PositionTypeTrans& val);

  bool operator == (const ClientService_get_close_price_args & rhs) const
  {
    if (!(ptt == rhs.ptt))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_close_price_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_close_price_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_close_price_args& obj);

};


class ClientService_get_close_price_pargs {
 public:

  static const char* ascii_fingerprint; // = "0E87A62696F21F1757D216119854DA66";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x87,0xA6,0x26,0x96,0xF2,0x1F,0x17,0x57,0xD2,0x16,0x11,0x98,0x54,0xDA,0x66};


  virtual ~ClientService_get_close_price_pargs() throw();
  const PositionTypeTrans* ptt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_close_price_pargs& obj);

};

typedef struct _ClientService_get_close_price_result__isset {
  _ClientService_get_close_price_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_close_price_result__isset;

class ClientService_get_close_price_result {
 public:

  static const char* ascii_fingerprint; // = "F2C0343F003B98A8EB82C5D8A2ECF2FF";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xC0,0x34,0x3F,0x00,0x3B,0x98,0xA8,0xEB,0x82,0xC5,0xD8,0xA2,0xEC,0xF2,0xFF};

  ClientService_get_close_price_result(const ClientService_get_close_price_result&);
  ClientService_get_close_price_result& operator=(const ClientService_get_close_price_result&);
  ClientService_get_close_price_result() : success(0) {
  }

  virtual ~ClientService_get_close_price_result() throw();
  double success;
  InvalidQuery iq;

  _ClientService_get_close_price_result__isset __isset;

  void __set_success(const double val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_close_price_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_close_price_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_close_price_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_close_price_result& obj);

};

typedef struct _ClientService_get_close_price_presult__isset {
  _ClientService_get_close_price_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_close_price_presult__isset;

class ClientService_get_close_price_presult {
 public:

  static const char* ascii_fingerprint; // = "F2C0343F003B98A8EB82C5D8A2ECF2FF";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xC0,0x34,0x3F,0x00,0x3B,0x98,0xA8,0xEB,0x82,0xC5,0xD8,0xA2,0xEC,0xF2,0xFF};


  virtual ~ClientService_get_close_price_presult() throw();
  double* success;
  InvalidQuery iq;

  _ClientService_get_close_price_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_close_price_presult& obj);

};

typedef struct _ClientService_get_calculated_balance_args__isset {
  _ClientService_get_calculated_balance_args__isset() : client_id(false) {}
  bool client_id :1;
} _ClientService_get_calculated_balance_args__isset;

class ClientService_get_calculated_balance_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ClientService_get_calculated_balance_args(const ClientService_get_calculated_balance_args&);
  ClientService_get_calculated_balance_args& operator=(const ClientService_get_calculated_balance_args&);
  ClientService_get_calculated_balance_args() : client_id(0) {
  }

  virtual ~ClientService_get_calculated_balance_args() throw();
  int32_t client_id;

  _ClientService_get_calculated_balance_args__isset __isset;

  void __set_client_id(const int32_t val);

  bool operator == (const ClientService_get_calculated_balance_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_calculated_balance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_calculated_balance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_calculated_balance_args& obj);

};


class ClientService_get_calculated_balance_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ClientService_get_calculated_balance_pargs() throw();
  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_calculated_balance_pargs& obj);

};

typedef struct _ClientService_get_calculated_balance_result__isset {
  _ClientService_get_calculated_balance_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_calculated_balance_result__isset;

class ClientService_get_calculated_balance_result {
 public:

  static const char* ascii_fingerprint; // = "763BCB9B2F641DA9037992F8F2442D13";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x3B,0xCB,0x9B,0x2F,0x64,0x1D,0xA9,0x03,0x79,0x92,0xF8,0xF2,0x44,0x2D,0x13};

  ClientService_get_calculated_balance_result(const ClientService_get_calculated_balance_result&);
  ClientService_get_calculated_balance_result& operator=(const ClientService_get_calculated_balance_result&);
  ClientService_get_calculated_balance_result() {
  }

  virtual ~ClientService_get_calculated_balance_result() throw();
  std::map<std::string, double>  success;
  InvalidQuery iq;

  _ClientService_get_calculated_balance_result__isset __isset;

  void __set_success(const std::map<std::string, double> & val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_calculated_balance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_calculated_balance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_calculated_balance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_calculated_balance_result& obj);

};

typedef struct _ClientService_get_calculated_balance_presult__isset {
  _ClientService_get_calculated_balance_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_calculated_balance_presult__isset;

class ClientService_get_calculated_balance_presult {
 public:

  static const char* ascii_fingerprint; // = "763BCB9B2F641DA9037992F8F2442D13";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x3B,0xCB,0x9B,0x2F,0x64,0x1D,0xA9,0x03,0x79,0x92,0xF8,0xF2,0x44,0x2D,0x13};


  virtual ~ClientService_get_calculated_balance_presult() throw();
  std::map<std::string, double> * success;
  InvalidQuery iq;

  _ClientService_get_calculated_balance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_calculated_balance_presult& obj);

};


class ClientService_get_greeks_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ClientService_get_greeks_args(const ClientService_get_greeks_args&);
  ClientService_get_greeks_args& operator=(const ClientService_get_greeks_args&);
  ClientService_get_greeks_args() {
  }

  virtual ~ClientService_get_greeks_args() throw();

  bool operator == (const ClientService_get_greeks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_get_greeks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_greeks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_greeks_args& obj);

};


class ClientService_get_greeks_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ClientService_get_greeks_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_greeks_pargs& obj);

};

typedef struct _ClientService_get_greeks_result__isset {
  _ClientService_get_greeks_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_greeks_result__isset;

class ClientService_get_greeks_result {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};

  ClientService_get_greeks_result(const ClientService_get_greeks_result&);
  ClientService_get_greeks_result& operator=(const ClientService_get_greeks_result&);
  ClientService_get_greeks_result() {
  }

  virtual ~ClientService_get_greeks_result() throw();
  GreekRisk success;
  InvalidQuery iq;

  _ClientService_get_greeks_result__isset __isset;

  void __set_success(const GreekRisk& val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_greeks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_greeks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_greeks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_greeks_result& obj);

};

typedef struct _ClientService_get_greeks_presult__isset {
  _ClientService_get_greeks_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_greeks_presult__isset;

class ClientService_get_greeks_presult {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};


  virtual ~ClientService_get_greeks_presult() throw();
  GreekRisk* success;
  InvalidQuery iq;

  _ClientService_get_greeks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_greeks_presult& obj);

};

typedef struct _ClientService_get_client_greeks_args__isset {
  _ClientService_get_client_greeks_args__isset() : client_id(false) {}
  bool client_id :1;
} _ClientService_get_client_greeks_args__isset;

class ClientService_get_client_greeks_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ClientService_get_client_greeks_args(const ClientService_get_client_greeks_args&);
  ClientService_get_client_greeks_args& operator=(const ClientService_get_client_greeks_args&);
  ClientService_get_client_greeks_args() : client_id(0) {
  }

  virtual ~ClientService_get_client_greeks_args() throw();
  int32_t client_id;

  _ClientService_get_client_greeks_args__isset __isset;

  void __set_client_id(const int32_t val);

  bool operator == (const ClientService_get_client_greeks_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_client_greeks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_client_greeks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_client_greeks_args& obj);

};


class ClientService_get_client_greeks_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ClientService_get_client_greeks_pargs() throw();
  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_client_greeks_pargs& obj);

};

typedef struct _ClientService_get_client_greeks_result__isset {
  _ClientService_get_client_greeks_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_client_greeks_result__isset;

class ClientService_get_client_greeks_result {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};

  ClientService_get_client_greeks_result(const ClientService_get_client_greeks_result&);
  ClientService_get_client_greeks_result& operator=(const ClientService_get_client_greeks_result&);
  ClientService_get_client_greeks_result() {
  }

  virtual ~ClientService_get_client_greeks_result() throw();
  GreekRisk success;
  InvalidQuery iq;

  _ClientService_get_client_greeks_result__isset __isset;

  void __set_success(const GreekRisk& val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_client_greeks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_client_greeks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_client_greeks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_client_greeks_result& obj);

};

typedef struct _ClientService_get_client_greeks_presult__isset {
  _ClientService_get_client_greeks_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_client_greeks_presult__isset;

class ClientService_get_client_greeks_presult {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};


  virtual ~ClientService_get_client_greeks_presult() throw();
  GreekRisk* success;
  InvalidQuery iq;

  _ClientService_get_client_greeks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_client_greeks_presult& obj);

};

typedef struct _ClientService_update_hedge_position_args__isset {
  _ClientService_update_hedge_position_args__isset() : ptt(false) {}
  bool ptt :1;
} _ClientService_update_hedge_position_args__isset;

class ClientService_update_hedge_position_args {
 public:

  static const char* ascii_fingerprint; // = "46B9A17A4F8DE224C5220D62878D2E48";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xB9,0xA1,0x7A,0x4F,0x8D,0xE2,0x24,0xC5,0x22,0x0D,0x62,0x87,0x8D,0x2E,0x48};

  ClientService_update_hedge_position_args(const ClientService_update_hedge_position_args&);
  ClientService_update_hedge_position_args& operator=(const ClientService_update_hedge_position_args&);
  ClientService_update_hedge_position_args() {
  }

  virtual ~ClientService_update_hedge_position_args() throw();
  std::vector<PositionTypeTrans>  ptt;

  _ClientService_update_hedge_position_args__isset __isset;

  void __set_ptt(const std::vector<PositionTypeTrans> & val);

  bool operator == (const ClientService_update_hedge_position_args & rhs) const
  {
    if (!(ptt == rhs.ptt))
      return false;
    return true;
  }
  bool operator != (const ClientService_update_hedge_position_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_update_hedge_position_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_update_hedge_position_args& obj);

};


class ClientService_update_hedge_position_pargs {
 public:

  static const char* ascii_fingerprint; // = "46B9A17A4F8DE224C5220D62878D2E48";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xB9,0xA1,0x7A,0x4F,0x8D,0xE2,0x24,0xC5,0x22,0x0D,0x62,0x87,0x8D,0x2E,0x48};


  virtual ~ClientService_update_hedge_position_pargs() throw();
  const std::vector<PositionTypeTrans> * ptt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_update_hedge_position_pargs& obj);

};

typedef struct _ClientService_update_hedge_position_result__isset {
  _ClientService_update_hedge_position_result__isset() : iq(false) {}
  bool iq :1;
} _ClientService_update_hedge_position_result__isset;

class ClientService_update_hedge_position_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  ClientService_update_hedge_position_result(const ClientService_update_hedge_position_result&);
  ClientService_update_hedge_position_result& operator=(const ClientService_update_hedge_position_result&);
  ClientService_update_hedge_position_result() {
  }

  virtual ~ClientService_update_hedge_position_result() throw();
  InvalidQuery iq;

  _ClientService_update_hedge_position_result__isset __isset;

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_update_hedge_position_result & rhs) const
  {
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_update_hedge_position_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_update_hedge_position_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_update_hedge_position_result& obj);

};

typedef struct _ClientService_update_hedge_position_presult__isset {
  _ClientService_update_hedge_position_presult__isset() : iq(false) {}
  bool iq :1;
} _ClientService_update_hedge_position_presult__isset;

class ClientService_update_hedge_position_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~ClientService_update_hedge_position_presult() throw();
  InvalidQuery iq;

  _ClientService_update_hedge_position_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_update_hedge_position_presult& obj);

};

typedef struct _ClientService_place_order_args__isset {
  _ClientService_place_order_args__isset() : order(false) {}
  bool order :1;
} _ClientService_place_order_args__isset;

class ClientService_place_order_args {
 public:

  static const char* ascii_fingerprint; // = "5F3E6F51630E1D2A63A0FFCAFFCCDC8B";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x3E,0x6F,0x51,0x63,0x0E,0x1D,0x2A,0x63,0xA0,0xFF,0xCA,0xFF,0xCC,0xDC,0x8B};

  ClientService_place_order_args(const ClientService_place_order_args&);
  ClientService_place_order_args& operator=(const ClientService_place_order_args&);
  ClientService_place_order_args() {
  }

  virtual ~ClientService_place_order_args() throw();
  OrderTypeTrans order;

  _ClientService_place_order_args__isset __isset;

  void __set_order(const OrderTypeTrans& val);

  bool operator == (const ClientService_place_order_args & rhs) const
  {
    if (!(order == rhs.order))
      return false;
    return true;
  }
  bool operator != (const ClientService_place_order_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_place_order_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_place_order_args& obj);

};


class ClientService_place_order_pargs {
 public:

  static const char* ascii_fingerprint; // = "5F3E6F51630E1D2A63A0FFCAFFCCDC8B";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x3E,0x6F,0x51,0x63,0x0E,0x1D,0x2A,0x63,0xA0,0xFF,0xCA,0xFF,0xCC,0xDC,0x8B};


  virtual ~ClientService_place_order_pargs() throw();
  const OrderTypeTrans* order;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_place_order_pargs& obj);

};

typedef struct _ClientService_place_order_result__isset {
  _ClientService_place_order_result__isset() : iq(false) {}
  bool iq :1;
} _ClientService_place_order_result__isset;

class ClientService_place_order_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  ClientService_place_order_result(const ClientService_place_order_result&);
  ClientService_place_order_result& operator=(const ClientService_place_order_result&);
  ClientService_place_order_result() {
  }

  virtual ~ClientService_place_order_result() throw();
  InvalidQuery iq;

  _ClientService_place_order_result__isset __isset;

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_place_order_result & rhs) const
  {
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_place_order_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_place_order_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_place_order_result& obj);

};

typedef struct _ClientService_place_order_presult__isset {
  _ClientService_place_order_presult__isset() : iq(false) {}
  bool iq :1;
} _ClientService_place_order_presult__isset;

class ClientService_place_order_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~ClientService_place_order_presult() throw();
  InvalidQuery iq;

  _ClientService_place_order_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_place_order_presult& obj);

};

typedef struct _ClientService_get_order_args__isset {
  _ClientService_get_order_args__isset() : client_id(false), start_date(false), end_date(false) {}
  bool client_id :1;
  bool start_date :1;
  bool end_date :1;
} _ClientService_get_order_args__isset;

class ClientService_get_order_args {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  ClientService_get_order_args(const ClientService_get_order_args&);
  ClientService_get_order_args& operator=(const ClientService_get_order_args&);
  ClientService_get_order_args() : client_id(0), start_date(), end_date() {
  }

  virtual ~ClientService_get_order_args() throw();
  int32_t client_id;
  std::string start_date;
  std::string end_date;

  _ClientService_get_order_args__isset __isset;

  void __set_client_id(const int32_t val);

  void __set_start_date(const std::string& val);

  void __set_end_date(const std::string& val);

  bool operator == (const ClientService_get_order_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(start_date == rhs.start_date))
      return false;
    if (!(end_date == rhs.end_date))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_order_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_order_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_order_args& obj);

};


class ClientService_get_order_pargs {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};


  virtual ~ClientService_get_order_pargs() throw();
  const int32_t* client_id;
  const std::string* start_date;
  const std::string* end_date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_order_pargs& obj);

};

typedef struct _ClientService_get_order_result__isset {
  _ClientService_get_order_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_order_result__isset;

class ClientService_get_order_result {
 public:

  static const char* ascii_fingerprint; // = "90EFFCF8D5DAA864E35255568216DABF";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xEF,0xFC,0xF8,0xD5,0xDA,0xA8,0x64,0xE3,0x52,0x55,0x56,0x82,0x16,0xDA,0xBF};

  ClientService_get_order_result(const ClientService_get_order_result&);
  ClientService_get_order_result& operator=(const ClientService_get_order_result&);
  ClientService_get_order_result() {
  }

  virtual ~ClientService_get_order_result() throw();
  std::vector<OrderTypeTrans>  success;
  InvalidQuery iq;

  _ClientService_get_order_result__isset __isset;

  void __set_success(const std::vector<OrderTypeTrans> & val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_order_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_order_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_order_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_order_result& obj);

};

typedef struct _ClientService_get_order_presult__isset {
  _ClientService_get_order_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_order_presult__isset;

class ClientService_get_order_presult {
 public:

  static const char* ascii_fingerprint; // = "90EFFCF8D5DAA864E35255568216DABF";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xEF,0xFC,0xF8,0xD5,0xDA,0xA8,0x64,0xE3,0x52,0x55,0x56,0x82,0x16,0xDA,0xBF};


  virtual ~ClientService_get_order_presult() throw();
  std::vector<OrderTypeTrans> * success;
  InvalidQuery iq;

  _ClientService_get_order_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_order_presult& obj);

};

typedef struct _ClientService_get_transaction_args__isset {
  _ClientService_get_transaction_args__isset() : client_id(false), start_date(false), end_date(false) {}
  bool client_id :1;
  bool start_date :1;
  bool end_date :1;
} _ClientService_get_transaction_args__isset;

class ClientService_get_transaction_args {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  ClientService_get_transaction_args(const ClientService_get_transaction_args&);
  ClientService_get_transaction_args& operator=(const ClientService_get_transaction_args&);
  ClientService_get_transaction_args() : client_id(0), start_date(), end_date() {
  }

  virtual ~ClientService_get_transaction_args() throw();
  int32_t client_id;
  std::string start_date;
  std::string end_date;

  _ClientService_get_transaction_args__isset __isset;

  void __set_client_id(const int32_t val);

  void __set_start_date(const std::string& val);

  void __set_end_date(const std::string& val);

  bool operator == (const ClientService_get_transaction_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(start_date == rhs.start_date))
      return false;
    if (!(end_date == rhs.end_date))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_transaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_transaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_transaction_args& obj);

};


class ClientService_get_transaction_pargs {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};


  virtual ~ClientService_get_transaction_pargs() throw();
  const int32_t* client_id;
  const std::string* start_date;
  const std::string* end_date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_transaction_pargs& obj);

};

typedef struct _ClientService_get_transaction_result__isset {
  _ClientService_get_transaction_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_transaction_result__isset;

class ClientService_get_transaction_result {
 public:

  static const char* ascii_fingerprint; // = "5F1F8BB22F4BFEBDA382FE4C1F8DD834";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x1F,0x8B,0xB2,0x2F,0x4B,0xFE,0xBD,0xA3,0x82,0xFE,0x4C,0x1F,0x8D,0xD8,0x34};

  ClientService_get_transaction_result(const ClientService_get_transaction_result&);
  ClientService_get_transaction_result& operator=(const ClientService_get_transaction_result&);
  ClientService_get_transaction_result() {
  }

  virtual ~ClientService_get_transaction_result() throw();
  std::vector<TransactionTypeTrans>  success;
  InvalidQuery iq;

  _ClientService_get_transaction_result__isset __isset;

  void __set_success(const std::vector<TransactionTypeTrans> & val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_transaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_transaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_transaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_transaction_result& obj);

};

typedef struct _ClientService_get_transaction_presult__isset {
  _ClientService_get_transaction_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_transaction_presult__isset;

class ClientService_get_transaction_presult {
 public:

  static const char* ascii_fingerprint; // = "5F1F8BB22F4BFEBDA382FE4C1F8DD834";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x1F,0x8B,0xB2,0x2F,0x4B,0xFE,0xBD,0xA3,0x82,0xFE,0x4C,0x1F,0x8D,0xD8,0x34};


  virtual ~ClientService_get_transaction_presult() throw();
  std::vector<TransactionTypeTrans> * success;
  InvalidQuery iq;

  _ClientService_get_transaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_transaction_presult& obj);

};

typedef struct _ClientService_get_position_args__isset {
  _ClientService_get_position_args__isset() : client_id(false) {}
  bool client_id :1;
} _ClientService_get_position_args__isset;

class ClientService_get_position_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ClientService_get_position_args(const ClientService_get_position_args&);
  ClientService_get_position_args& operator=(const ClientService_get_position_args&);
  ClientService_get_position_args() : client_id(0) {
  }

  virtual ~ClientService_get_position_args() throw();
  int32_t client_id;

  _ClientService_get_position_args__isset __isset;

  void __set_client_id(const int32_t val);

  bool operator == (const ClientService_get_position_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_position_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_position_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_position_args& obj);

};


class ClientService_get_position_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ClientService_get_position_pargs() throw();
  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_position_pargs& obj);

};

typedef struct _ClientService_get_position_result__isset {
  _ClientService_get_position_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_position_result__isset;

class ClientService_get_position_result {
 public:

  static const char* ascii_fingerprint; // = "E84D6F3181515B338475CE533A1B0C1B";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x4D,0x6F,0x31,0x81,0x51,0x5B,0x33,0x84,0x75,0xCE,0x53,0x3A,0x1B,0x0C,0x1B};

  ClientService_get_position_result(const ClientService_get_position_result&);
  ClientService_get_position_result& operator=(const ClientService_get_position_result&);
  ClientService_get_position_result() {
  }

  virtual ~ClientService_get_position_result() throw();
  std::vector<PositionTypeTrans>  success;
  InvalidQuery iq;

  _ClientService_get_position_result__isset __isset;

  void __set_success(const std::vector<PositionTypeTrans> & val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_position_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_position_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_position_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_position_result& obj);

};

typedef struct _ClientService_get_position_presult__isset {
  _ClientService_get_position_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_position_presult__isset;

class ClientService_get_position_presult {
 public:

  static const char* ascii_fingerprint; // = "E84D6F3181515B338475CE533A1B0C1B";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x4D,0x6F,0x31,0x81,0x51,0x5B,0x33,0x84,0x75,0xCE,0x53,0x3A,0x1B,0x0C,0x1B};


  virtual ~ClientService_get_position_presult() throw();
  std::vector<PositionTypeTrans> * success;
  InvalidQuery iq;

  _ClientService_get_position_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_position_presult& obj);

};

typedef struct _ClientService_get_balance_args__isset {
  _ClientService_get_balance_args__isset() : client_id(false) {}
  bool client_id :1;
} _ClientService_get_balance_args__isset;

class ClientService_get_balance_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ClientService_get_balance_args(const ClientService_get_balance_args&);
  ClientService_get_balance_args& operator=(const ClientService_get_balance_args&);
  ClientService_get_balance_args() : client_id(0) {
  }

  virtual ~ClientService_get_balance_args() throw();
  int32_t client_id;

  _ClientService_get_balance_args__isset __isset;

  void __set_client_id(const int32_t val);

  bool operator == (const ClientService_get_balance_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_balance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_balance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_balance_args& obj);

};


class ClientService_get_balance_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ClientService_get_balance_pargs() throw();
  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_balance_pargs& obj);

};

typedef struct _ClientService_get_balance_result__isset {
  _ClientService_get_balance_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_balance_result__isset;

class ClientService_get_balance_result {
 public:

  static const char* ascii_fingerprint; // = "7F7D8D814635FFC1330ED5602F2C21D0";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x7D,0x8D,0x81,0x46,0x35,0xFF,0xC1,0x33,0x0E,0xD5,0x60,0x2F,0x2C,0x21,0xD0};

  ClientService_get_balance_result(const ClientService_get_balance_result&);
  ClientService_get_balance_result& operator=(const ClientService_get_balance_result&);
  ClientService_get_balance_result() {
  }

  virtual ~ClientService_get_balance_result() throw();
  ClientBalanceTrans success;
  InvalidQuery iq;

  _ClientService_get_balance_result__isset __isset;

  void __set_success(const ClientBalanceTrans& val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_balance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_balance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_balance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_balance_result& obj);

};

typedef struct _ClientService_get_balance_presult__isset {
  _ClientService_get_balance_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_balance_presult__isset;

class ClientService_get_balance_presult {
 public:

  static const char* ascii_fingerprint; // = "7F7D8D814635FFC1330ED5602F2C21D0";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x7D,0x8D,0x81,0x46,0x35,0xFF,0xC1,0x33,0x0E,0xD5,0x60,0x2F,0x2C,0x21,0xD0};


  virtual ~ClientService_get_balance_presult() throw();
  ClientBalanceTrans* success;
  InvalidQuery iq;

  _ClientService_get_balance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_balance_presult& obj);

};

typedef struct _ClientService_get_clientinfo_args__isset {
  _ClientService_get_clientinfo_args__isset() : client_id(false) {}
  bool client_id :1;
} _ClientService_get_clientinfo_args__isset;

class ClientService_get_clientinfo_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ClientService_get_clientinfo_args(const ClientService_get_clientinfo_args&);
  ClientService_get_clientinfo_args& operator=(const ClientService_get_clientinfo_args&);
  ClientService_get_clientinfo_args() : client_id(0) {
  }

  virtual ~ClientService_get_clientinfo_args() throw();
  int32_t client_id;

  _ClientService_get_clientinfo_args__isset __isset;

  void __set_client_id(const int32_t val);

  bool operator == (const ClientService_get_clientinfo_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_clientinfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_clientinfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_clientinfo_args& obj);

};


class ClientService_get_clientinfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ClientService_get_clientinfo_pargs() throw();
  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_clientinfo_pargs& obj);

};

typedef struct _ClientService_get_clientinfo_result__isset {
  _ClientService_get_clientinfo_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_clientinfo_result__isset;

class ClientService_get_clientinfo_result {
 public:

  static const char* ascii_fingerprint; // = "CF6EB4A794F8C9274B837D3C2ADE7A65";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x6E,0xB4,0xA7,0x94,0xF8,0xC9,0x27,0x4B,0x83,0x7D,0x3C,0x2A,0xDE,0x7A,0x65};

  ClientService_get_clientinfo_result(const ClientService_get_clientinfo_result&);
  ClientService_get_clientinfo_result& operator=(const ClientService_get_clientinfo_result&);
  ClientService_get_clientinfo_result() {
  }

  virtual ~ClientService_get_clientinfo_result() throw();
  ClientInfoTrans success;
  InvalidQuery iq;

  _ClientService_get_clientinfo_result__isset __isset;

  void __set_success(const ClientInfoTrans& val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_clientinfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_clientinfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_clientinfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_clientinfo_result& obj);

};

typedef struct _ClientService_get_clientinfo_presult__isset {
  _ClientService_get_clientinfo_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_clientinfo_presult__isset;

class ClientService_get_clientinfo_presult {
 public:

  static const char* ascii_fingerprint; // = "CF6EB4A794F8C9274B837D3C2ADE7A65";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x6E,0xB4,0xA7,0x94,0xF8,0xC9,0x27,0x4B,0x83,0x7D,0x3C,0x2A,0xDE,0x7A,0x65};


  virtual ~ClientService_get_clientinfo_presult() throw();
  ClientInfoTrans* success;
  InvalidQuery iq;

  _ClientService_get_clientinfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_clientinfo_presult& obj);

};


class ClientService_get_qoute_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ClientService_get_qoute_args(const ClientService_get_qoute_args&);
  ClientService_get_qoute_args& operator=(const ClientService_get_qoute_args&);
  ClientService_get_qoute_args() {
  }

  virtual ~ClientService_get_qoute_args() throw();

  bool operator == (const ClientService_get_qoute_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_get_qoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_qoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_qoute_args& obj);

};


class ClientService_get_qoute_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ClientService_get_qoute_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_qoute_pargs& obj);

};

typedef struct _ClientService_get_qoute_result__isset {
  _ClientService_get_qoute_result__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_qoute_result__isset;

class ClientService_get_qoute_result {
 public:

  static const char* ascii_fingerprint; // = "02DEA1E1A14DC9727F637A1C34AF6C2A";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0xDE,0xA1,0xE1,0xA1,0x4D,0xC9,0x72,0x7F,0x63,0x7A,0x1C,0x34,0xAF,0x6C,0x2A};

  ClientService_get_qoute_result(const ClientService_get_qoute_result&);
  ClientService_get_qoute_result& operator=(const ClientService_get_qoute_result&);
  ClientService_get_qoute_result() {
  }

  virtual ~ClientService_get_qoute_result() throw();
  std::vector<QouteTrans>  success;
  InvalidQuery iq;

  _ClientService_get_qoute_result__isset __isset;

  void __set_success(const std::vector<QouteTrans> & val);

  void __set_iq(const InvalidQuery& val);

  bool operator == (const ClientService_get_qoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(iq == rhs.iq))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_qoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_qoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_qoute_result& obj);

};

typedef struct _ClientService_get_qoute_presult__isset {
  _ClientService_get_qoute_presult__isset() : success(false), iq(false) {}
  bool success :1;
  bool iq :1;
} _ClientService_get_qoute_presult__isset;

class ClientService_get_qoute_presult {
 public:

  static const char* ascii_fingerprint; // = "02DEA1E1A14DC9727F637A1C34AF6C2A";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0xDE,0xA1,0xE1,0xA1,0x4D,0xC9,0x72,0x7F,0x63,0x7A,0x1C,0x34,0xAF,0x6C,0x2A};


  virtual ~ClientService_get_qoute_presult() throw();
  std::vector<QouteTrans> * success;
  InvalidQuery iq;

  _ClientService_get_qoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientService_get_qoute_presult& obj);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool auth(const std::string& client_id, const std::string& password);
  void send_auth(const std::string& client_id, const std::string& password);
  bool recv_auth();
  double get_pnl(const PositionTypeTrans& ptt);
  void send_get_pnl(const PositionTypeTrans& ptt);
  double recv_get_pnl();
  double get_close_price(const PositionTypeTrans& ptt);
  void send_get_close_price(const PositionTypeTrans& ptt);
  double recv_get_close_price();
  void get_calculated_balance(std::map<std::string, double> & _return, const int32_t client_id);
  void send_get_calculated_balance(const int32_t client_id);
  void recv_get_calculated_balance(std::map<std::string, double> & _return);
  void get_greeks(GreekRisk& _return);
  void send_get_greeks();
  void recv_get_greeks(GreekRisk& _return);
  void get_client_greeks(GreekRisk& _return, const int32_t client_id);
  void send_get_client_greeks(const int32_t client_id);
  void recv_get_client_greeks(GreekRisk& _return);
  void update_hedge_position(const std::vector<PositionTypeTrans> & ptt);
  void send_update_hedge_position(const std::vector<PositionTypeTrans> & ptt);
  void recv_update_hedge_position();
  void place_order(const OrderTypeTrans& order);
  void send_place_order(const OrderTypeTrans& order);
  void recv_place_order();
  void get_order(std::vector<OrderTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void send_get_order(const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void recv_get_order(std::vector<OrderTypeTrans> & _return);
  void get_transaction(std::vector<TransactionTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void send_get_transaction(const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void recv_get_transaction(std::vector<TransactionTypeTrans> & _return);
  void get_position(std::vector<PositionTypeTrans> & _return, const int32_t client_id);
  void send_get_position(const int32_t client_id);
  void recv_get_position(std::vector<PositionTypeTrans> & _return);
  void get_balance(ClientBalanceTrans& _return, const int32_t client_id);
  void send_get_balance(const int32_t client_id);
  void recv_get_balance(ClientBalanceTrans& _return);
  void get_clientinfo(ClientInfoTrans& _return, const int32_t client_id);
  void send_get_clientinfo(const int32_t client_id);
  void recv_get_clientinfo(ClientInfoTrans& _return);
  void get_qoute(std::vector<QouteTrans> & _return);
  void send_get_qoute();
  void recv_get_qoute(std::vector<QouteTrans> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_pnl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_close_price(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_calculated_balance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_greeks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_client_greeks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_hedge_position(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_place_order(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_order(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_transaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_position(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_balance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_clientinfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_qoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["auth"] = &ClientServiceProcessor::process_auth;
    processMap_["get_pnl"] = &ClientServiceProcessor::process_get_pnl;
    processMap_["get_close_price"] = &ClientServiceProcessor::process_get_close_price;
    processMap_["get_calculated_balance"] = &ClientServiceProcessor::process_get_calculated_balance;
    processMap_["get_greeks"] = &ClientServiceProcessor::process_get_greeks;
    processMap_["get_client_greeks"] = &ClientServiceProcessor::process_get_client_greeks;
    processMap_["update_hedge_position"] = &ClientServiceProcessor::process_update_hedge_position;
    processMap_["place_order"] = &ClientServiceProcessor::process_place_order;
    processMap_["get_order"] = &ClientServiceProcessor::process_get_order;
    processMap_["get_transaction"] = &ClientServiceProcessor::process_get_transaction;
    processMap_["get_position"] = &ClientServiceProcessor::process_get_position;
    processMap_["get_balance"] = &ClientServiceProcessor::process_get_balance;
    processMap_["get_clientinfo"] = &ClientServiceProcessor::process_get_clientinfo;
    processMap_["get_qoute"] = &ClientServiceProcessor::process_get_qoute;
  }

  virtual ~ClientServiceProcessor() {}
};

class ClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientServiceProcessorFactory(const ::boost::shared_ptr< ClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientServiceIfFactory > handlerFactory_;
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool auth(const std::string& client_id, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->auth(client_id, password);
    }
    return ifaces_[i]->auth(client_id, password);
  }

  double get_pnl(const PositionTypeTrans& ptt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pnl(ptt);
    }
    return ifaces_[i]->get_pnl(ptt);
  }

  double get_close_price(const PositionTypeTrans& ptt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_close_price(ptt);
    }
    return ifaces_[i]->get_close_price(ptt);
  }

  void get_calculated_balance(std::map<std::string, double> & _return, const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_calculated_balance(_return, client_id);
    }
    ifaces_[i]->get_calculated_balance(_return, client_id);
    return;
  }

  void get_greeks(GreekRisk& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_greeks(_return);
    }
    ifaces_[i]->get_greeks(_return);
    return;
  }

  void get_client_greeks(GreekRisk& _return, const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client_greeks(_return, client_id);
    }
    ifaces_[i]->get_client_greeks(_return, client_id);
    return;
  }

  void update_hedge_position(const std::vector<PositionTypeTrans> & ptt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_hedge_position(ptt);
    }
    ifaces_[i]->update_hedge_position(ptt);
  }

  void place_order(const OrderTypeTrans& order) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->place_order(order);
    }
    ifaces_[i]->place_order(order);
  }

  void get_order(std::vector<OrderTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_order(_return, client_id, start_date, end_date);
    }
    ifaces_[i]->get_order(_return, client_id, start_date, end_date);
    return;
  }

  void get_transaction(std::vector<TransactionTypeTrans> & _return, const int32_t client_id, const std::string& start_date, const std::string& end_date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_transaction(_return, client_id, start_date, end_date);
    }
    ifaces_[i]->get_transaction(_return, client_id, start_date, end_date);
    return;
  }

  void get_position(std::vector<PositionTypeTrans> & _return, const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_position(_return, client_id);
    }
    ifaces_[i]->get_position(_return, client_id);
    return;
  }

  void get_balance(ClientBalanceTrans& _return, const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_balance(_return, client_id);
    }
    ifaces_[i]->get_balance(_return, client_id);
    return;
  }

  void get_clientinfo(ClientInfoTrans& _return, const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_clientinfo(_return, client_id);
    }
    ifaces_[i]->get_clientinfo(_return, client_id);
    return;
  }

  void get_qoute(std::vector<QouteTrans> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_qoute(_return);
    }
    ifaces_[i]->get_qoute(_return);
    return;
  }

};

class ClientServiceCobClient;

class ClientServiceCobClIf {
 public:
  virtual ~ClientServiceCobClIf() {}
  virtual void auth(tcxx::function<void(ClientServiceCobClient* client)> cob, const std::string& client_id, const std::string& password) = 0;
  virtual void get_pnl(tcxx::function<void(ClientServiceCobClient* client)> cob, const PositionTypeTrans& ptt) = 0;
  virtual void get_close_price(tcxx::function<void(ClientServiceCobClient* client)> cob, const PositionTypeTrans& ptt) = 0;
  virtual void get_calculated_balance(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id) = 0;
  virtual void get_greeks(tcxx::function<void(ClientServiceCobClient* client)> cob) = 0;
  virtual void get_client_greeks(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id) = 0;
  virtual void update_hedge_position(tcxx::function<void(ClientServiceCobClient* client)> cob, const std::vector<PositionTypeTrans> & ptt) = 0;
  virtual void place_order(tcxx::function<void(ClientServiceCobClient* client)> cob, const OrderTypeTrans& order) = 0;
  virtual void get_order(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_transaction(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_position(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id) = 0;
  virtual void get_balance(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id) = 0;
  virtual void get_clientinfo(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id) = 0;
  virtual void get_qoute(tcxx::function<void(ClientServiceCobClient* client)> cob) = 0;
};

class ClientServiceCobSvIf {
 public:
  virtual ~ClientServiceCobSvIf() {}
  virtual void auth(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& client_id, const std::string& password) = 0;
  virtual void get_pnl(tcxx::function<void(double const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const PositionTypeTrans& ptt) = 0;
  virtual void get_close_price(tcxx::function<void(double const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const PositionTypeTrans& ptt) = 0;
  virtual void get_calculated_balance(tcxx::function<void(std::map<std::string, double>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id) = 0;
  virtual void get_greeks(tcxx::function<void(GreekRisk const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) = 0;
  virtual void get_client_greeks(tcxx::function<void(GreekRisk const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id) = 0;
  virtual void update_hedge_position(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::vector<PositionTypeTrans> & ptt) = 0;
  virtual void place_order(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const OrderTypeTrans& order) = 0;
  virtual void get_order(tcxx::function<void(std::vector<OrderTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_transaction(tcxx::function<void(std::vector<TransactionTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id, const std::string& start_date, const std::string& end_date) = 0;
  virtual void get_position(tcxx::function<void(std::vector<PositionTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id) = 0;
  virtual void get_balance(tcxx::function<void(ClientBalanceTrans const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id) = 0;
  virtual void get_clientinfo(tcxx::function<void(ClientInfoTrans const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t client_id) = 0;
  virtual void get_qoute(tcxx::function<void(std::vector<QouteTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) = 0;
};

class ClientServiceCobSvIfFactory {
 public:
  typedef ClientServiceCobSvIf Handler;

  virtual ~ClientServiceCobSvIfFactory() {}

  virtual ClientServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientServiceCobSvIf* /* handler */) = 0;
};

class ClientServiceCobSvIfSingletonFactory : virtual public ClientServiceCobSvIfFactory {
 public:
  ClientServiceCobSvIfSingletonFactory(const boost::shared_ptr<ClientServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~ClientServiceCobSvIfSingletonFactory() {}

  virtual ClientServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientServiceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientServiceCobSvIf> iface_;
};

class ClientServiceCobSvNull : virtual public ClientServiceCobSvIf {
 public:
  virtual ~ClientServiceCobSvNull() {}
  void auth(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* client_id */, const std::string& /* password */) {
    bool _return = false;
    return cob(_return);
  }
  void get_pnl(tcxx::function<void(double const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const PositionTypeTrans& /* ptt */) {
    double _return = (double)0;
    return cob(_return);
  }
  void get_close_price(tcxx::function<void(double const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const PositionTypeTrans& /* ptt */) {
    double _return = (double)0;
    return cob(_return);
  }
  void get_calculated_balance(tcxx::function<void(std::map<std::string, double>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */) {
    std::map<std::string, double>  _return;
    return cob(_return);
  }
  void get_greeks(tcxx::function<void(GreekRisk const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) {
    GreekRisk _return;
    return cob(_return);
  }
  void get_client_greeks(tcxx::function<void(GreekRisk const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */) {
    GreekRisk _return;
    return cob(_return);
  }
  void update_hedge_position(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::vector<PositionTypeTrans> & /* ptt */) {
    return cob();
  }
  void place_order(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const OrderTypeTrans& /* order */) {
    return cob();
  }
  void get_order(tcxx::function<void(std::vector<OrderTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */, const std::string& /* start_date */, const std::string& /* end_date */) {
    std::vector<OrderTypeTrans>  _return;
    return cob(_return);
  }
  void get_transaction(tcxx::function<void(std::vector<TransactionTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */, const std::string& /* start_date */, const std::string& /* end_date */) {
    std::vector<TransactionTypeTrans>  _return;
    return cob(_return);
  }
  void get_position(tcxx::function<void(std::vector<PositionTypeTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */) {
    std::vector<PositionTypeTrans>  _return;
    return cob(_return);
  }
  void get_balance(tcxx::function<void(ClientBalanceTrans const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */) {
    ClientBalanceTrans _return;
    return cob(_return);
  }
  void get_clientinfo(tcxx::function<void(ClientInfoTrans const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* client_id */) {
    ClientInfoTrans _return;
    return cob(_return);
  }
  void get_qoute(tcxx::function<void(std::vector<QouteTrans>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) {
    std::vector<QouteTrans>  _return;
    return cob(_return);
  }
};

class ClientServiceCobClient : virtual public ClientServiceCobClIf {
 public:
  ClientServiceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void auth(tcxx::function<void(ClientServiceCobClient* client)> cob, const std::string& client_id, const std::string& password);
  void send_auth(const std::string& client_id, const std::string& password);
  bool recv_auth();
  void get_pnl(tcxx::function<void(ClientServiceCobClient* client)> cob, const PositionTypeTrans& ptt);
  void send_get_pnl(const PositionTypeTrans& ptt);
  double recv_get_pnl();
  void get_close_price(tcxx::function<void(ClientServiceCobClient* client)> cob, const PositionTypeTrans& ptt);
  void send_get_close_price(const PositionTypeTrans& ptt);
  double recv_get_close_price();
  void get_calculated_balance(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id);
  void send_get_calculated_balance(const int32_t client_id);
  void recv_get_calculated_balance(std::map<std::string, double> & _return);
  void get_greeks(tcxx::function<void(ClientServiceCobClient* client)> cob);
  void send_get_greeks();
  void recv_get_greeks(GreekRisk& _return);
  void get_client_greeks(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id);
  void send_get_client_greeks(const int32_t client_id);
  void recv_get_client_greeks(GreekRisk& _return);
  void update_hedge_position(tcxx::function<void(ClientServiceCobClient* client)> cob, const std::vector<PositionTypeTrans> & ptt);
  void send_update_hedge_position(const std::vector<PositionTypeTrans> & ptt);
  void recv_update_hedge_position();
  void place_order(tcxx::function<void(ClientServiceCobClient* client)> cob, const OrderTypeTrans& order);
  void send_place_order(const OrderTypeTrans& order);
  void recv_place_order();
  void get_order(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void send_get_order(const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void recv_get_order(std::vector<OrderTypeTrans> & _return);
  void get_transaction(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void send_get_transaction(const int32_t client_id, const std::string& start_date, const std::string& end_date);
  void recv_get_transaction(std::vector<TransactionTypeTrans> & _return);
  void get_position(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id);
  void send_get_position(const int32_t client_id);
  void recv_get_position(std::vector<PositionTypeTrans> & _return);
  void get_balance(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id);
  void send_get_balance(const int32_t client_id);
  void recv_get_balance(ClientBalanceTrans& _return);
  void get_clientinfo(tcxx::function<void(ClientServiceCobClient* client)> cob, const int32_t client_id);
  void send_get_clientinfo(const int32_t client_id);
  void recv_get_clientinfo(ClientInfoTrans& _return);
  void get_qoute(tcxx::function<void(ClientServiceCobClient* client)> cob);
  void send_get_qoute();
  void recv_get_qoute(std::vector<QouteTrans> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<ClientServiceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (ClientServiceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_auth(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_auth(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_auth(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_pnl(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_pnl(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const double& _return);
  void throw_get_pnl(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_close_price(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_close_price(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const double& _return);
  void throw_get_close_price(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_calculated_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_calculated_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map<std::string, double> & _return);
  void throw_get_calculated_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const GreekRisk& _return);
  void throw_get_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_client_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_client_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const GreekRisk& _return);
  void throw_get_client_greeks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_hedge_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_hedge_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_update_hedge_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_place_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_place_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_place_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<OrderTypeTrans> & _return);
  void throw_get_order(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_transaction(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_transaction(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<TransactionTypeTrans> & _return);
  void throw_get_transaction(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<PositionTypeTrans> & _return);
  void throw_get_position(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ClientBalanceTrans& _return);
  void throw_get_balance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_clientinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_clientinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ClientInfoTrans& _return);
  void throw_get_clientinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_qoute(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_qoute(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<QouteTrans> & _return);
  void throw_get_qoute(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  ClientServiceAsyncProcessor(boost::shared_ptr<ClientServiceCobSvIf> iface) :
    iface_(iface) {
    processMap_["auth"] = &ClientServiceAsyncProcessor::process_auth;
    processMap_["get_pnl"] = &ClientServiceAsyncProcessor::process_get_pnl;
    processMap_["get_close_price"] = &ClientServiceAsyncProcessor::process_get_close_price;
    processMap_["get_calculated_balance"] = &ClientServiceAsyncProcessor::process_get_calculated_balance;
    processMap_["get_greeks"] = &ClientServiceAsyncProcessor::process_get_greeks;
    processMap_["get_client_greeks"] = &ClientServiceAsyncProcessor::process_get_client_greeks;
    processMap_["update_hedge_position"] = &ClientServiceAsyncProcessor::process_update_hedge_position;
    processMap_["place_order"] = &ClientServiceAsyncProcessor::process_place_order;
    processMap_["get_order"] = &ClientServiceAsyncProcessor::process_get_order;
    processMap_["get_transaction"] = &ClientServiceAsyncProcessor::process_get_transaction;
    processMap_["get_position"] = &ClientServiceAsyncProcessor::process_get_position;
    processMap_["get_balance"] = &ClientServiceAsyncProcessor::process_get_balance;
    processMap_["get_clientinfo"] = &ClientServiceAsyncProcessor::process_get_clientinfo;
    processMap_["get_qoute"] = &ClientServiceAsyncProcessor::process_get_qoute;
  }

  virtual ~ClientServiceAsyncProcessor() {}
};

class ClientServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  ClientServiceAsyncProcessorFactory(const ::boost::shared_ptr< ClientServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientServiceCobSvIfFactory > handlerFactory_;
};



#endif
